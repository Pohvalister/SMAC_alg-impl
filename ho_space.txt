1. Classification

1.1. Decision Tree:
criterion = CategoricalHyperparameter("criterion", ["gini", "entropy"])
splitter = CategoricalHyperparameter("splitter", ["best", "random"])

min_samples_split = UniformIntegerHyperparameter("min_samples_split", 2, 20)
max_depth = UniformIntegerHyperparameter("max_depth", 100, 1000)
min_samples_leaf = UniformIntegerHyperparameter("min_samples_leaf", 1, 100)

min_impurity_decrease = UniformFloatHyperparameter("min_impurity_decrease", 0.0, 0.7)

1.2. kNN:
algorithm = CategoricalHyperparameter("algorithm", ["auto", "ball_tree", "kd_tree", "brute"])
metric = CategoricalHyperparameter("metric", ["cityblock", "euclidean", "l1", "l2",
                                                "manhattan", "minkowski"])

n_neighbors = UniformIntegerHyperparameter("n_neighbors", 2, 15)
leaf_size = UniformIntegerHyperparameter("leaf_size", 5, 50)

1.3. Logistic Regression:
penalty = CategoricalHyperparameter("penalty", ["l1", "l2"])
solver = CategoricalHyperparameter("solver", ["newton-cg", "lbfgs", "liblinear", "sag", "saga"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
c = UniformFloatHyperparameter("C", 0.001, 1000.0)

max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)
verbose = UniformIntegerHyperparameter("verbose", 1, 10)

1.4. Perceptron:
penalty = CategoricalHyperparameter("penalty", ["l1", "l2", "elasticnet"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
alpha = UniformFloatHyperparameter("alpha", 1e-6, 1e-2)
eta0 = UniformFloatHyperparameter("eta0", 1e-2, 10.0)

max_iter = UniformIntegerHyperparameter("max_iter", 5, 1500)
verbose = UniformIntegerHyperparameter("verbose", 0, 10)

1.5. MLP:
activation = CategoricalHyperparameter("activation", ["identity", "logistic", "tanh", "relu"])
solver = CategoricalHyperparameter("solver", ["lbfgs", "sgd", "adam"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
alpha = UniformFloatHyperparameter("alpha", 1e-6, 1e-2)

max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)

1.6. SGD:
loss = CategoricalHyperparameter("loss", ["hinge", "log", "modified_huber", "squared_hinge", "perceptron"])
penalty = CategoricalHyperparameter("penalty", ["l1", "l2", "elasticnet"])

alpha = UniformFloatHyperparameter("alpha", 1e-6, 1e-2)
l1_ratio = UniformFloatHyperparameter("l1_ratio", 0.0, 1.0)
tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
power_t = UniformFloatHyperparameter("power_t", 0.1, 1.0)

max_iter = UniformIntegerHyperparameter("max_iter", 5, 1500)

1.7. SVC:
kernel = CategoricalHyperparameter("kernel", ["linear", "rbf", "poly", "sigmoid"])
shrinking = CategoricalHyperparameter("shrinking", ["true", "false"])

C = UniformFloatHyperparameter("C", 0.001, 1000.0)
coef0 = UniformFloatHyperparameter("coef0", 0.0, 10.0)

degree = UniformIntegerHyperparameter("degree", 1, 5)

2. Regression

2.1. Decision Tree:
criterion = CategoricalHyperparameter("criterion", ["mse", "friedman_mse", "mae"])
splitter = CategoricalHyperparameter("splitter", ["best", "random"])

min_samples_split = UniformIntegerHyperparameter("min_samples_split", 2, 20)
max_depth = UniformIntegerHyperparameter("max_depth", 100, 1000)
min_samples_leaf = UniformIntegerHyperparameter("min_samples_leaf", 1, 100)

min_impurity_decrease = UniformFloatHyperparameter("min_impurity_decrease", 0.0, 0.7)

2.2. kNN:
algorithm = CategoricalHyperparameter("algorithm", ["auto", "ball_tree", "kd_tree", "brute"])
metric = CategoricalHyperparameter("metric", ["cityblock", "euclidean", "l1", "l2", "manhattan", "minkowski"])

n_neighbors = UniformIntegerHyperparameter("n_neighbors", 2, 15)
leaf_size = UniformIntegerHyperparameter("leaf_size", 5, 50)

2.3. Linear Regression:
fit_intercept = UniformIntegerHyperparameter("fit_intercept", 0, 1)

2.4. ElasticNet:
selection = CategoricalHyperparameter("selection", ["cyclic", "random"])

l1_ratio = UniformFloatHyperparameter("l1_ratio", 0.0, 1.0)
tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)

fit_intercept = UniformIntegerHyperparameter("fit_intercept", 0, 1)
max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)

2.5. Lasso:
selection = CategoricalHyperparameter("selection", ["cyclic", "random"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)

fit_intercept = UniformIntegerHyperparameter("fit_intercept", 0, 1)
max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)

2.6. Ridge:
solver = CategoricalHyperparameter("solver", ["auto", "svd", "cholesky", "lsqr", "sparse_cg", "sag", "saga"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)

fit_intercept = UniformIntegerHyperparameter("fit_intercept", 0, 1)
max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)

2.7. MLP:
activation = CategoricalHyperparameter("activation", ["identity", "logistic", "tanh", "relu"])
solver = CategoricalHyperparameter("solver", ["lbfgs", "sgd", "adam"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
alpha = UniformFloatHyperparameter("alpha", 1e-6, 1e-2)

max_iter = UniformIntegerHyperparameter("max_iter", 50, 500)

2.8. SGD:
loss = CategoricalHyperparameter("loss", ["squared_loss", "huber", "epsilon_insensitive", "squared_epsilon_insensitive"])
penalty = CategoricalHyperparameter("penalty", ["l1", "l2", "elasticnet"])

alpha = UniformFloatHyperparameter("alpha", 1e-6, 1e-2)
l1_ratio = UniformFloatHyperparameter("l1_ratio", 0.0, 1.0)
tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)
power_t = UniformFloatHyperparameter("power_t", 0.1, 1.0)

max_iter = UniformIntegerHyperparameter("max_iter", 5, 1500)

2.9. SVR (same as SVC)

3. Clustering

3.1. kMeans:
algorithm = CategoricalHyperparameter("algorithm", ["auto", "full", "elkan"])

tol = UniformFloatHyperparameter("tol", 1e-6, 1e-2)

n_clusters = UniformIntegerHyperparameter("n_clusters", 2, 15)
n_init = UniformIntegerHyperparameter("n_init", 2, 15)
max_iter = UniformIntegerHyperparameter("max_iter", 50, 1500)
verbose = UniformIntegerHyperparameter("verbose", 0, 10)

3.2. Affinity Propagation:
damping = UniformFloatHyperparameter("damping", 0.5, 1.0)

max_iter = UniformIntegerHyperparameter("max_iter", 100, 1000)
convergence_iter = UniformIntegerHyperparameter("convergence_iter", 5, 20)

3.3. Mean Shift:
quantile = UniformFloatHyperparameter("quantile", 0.0, 1.0)

bin_seeding = UniformIntegerHyperparameter("bin_seeding", 0, 1)
min_bin_freq = UniformIntegerHyperparameter("min_bin_freq", 1, 100)
cluster_all = UniformIntegerHyperparameter("cluster_all", 0, 1)

3.4. DBSCAN:
algorithm = CategoricalHyperparameter("algorithm", ["auto", "ball_tree", "kd_tree", "brute"])

eps = UniformFloatHyperparameter("eps", 0.1, 0.9)

min_samples = UniformIntegerHyperparameter("min_samples", 2, 10)
leaf_size = UniformIntegerHyperparameter("leaf_size", 5, 100)

3.5. Gaussian Mixture:
cov_t = CategoricalHyperparameter("covariance_type", ["full", "tied", "diag", "spherical"])

tol = UniformFloatHyperparameter("tol", 1e-6, 0.1)
reg_c = UniformFloatHyperparameter("reg_covar", 1e-10, 0.1)

n_com = UniformIntegerHyperparameter("n_components", 2, 15)
max_iter = UniformIntegerHyperparameter("max_iter", 10, 1000)

3.6. Bayesian Gaussian Mixture:
cov_t = CategoricalHyperparameter("covariance_type", ["full", "tied", "diag", "spherical"])

tol = UniformFloatHyperparameter("tol", 1e-6, 0.1)
reg_c = UniformFloatHyperparameter("reg_covar", 1e-10, 0.1)
wcp = UniformFloatHyperparameter("weight_concentration_prior", 1e-10, 0.1)
mpp = UniformFloatHyperparameter("mean_precision_prior", 1e-10, 0.1)

n_com = UniformIntegerHyperparameter("n_components", 2, 15)
max_iter = UniformIntegerHyperparameter("max_iter", 10, 1000)